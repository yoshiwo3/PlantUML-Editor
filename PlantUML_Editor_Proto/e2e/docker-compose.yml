# E2E„ÉÜ„Çπ„ÉàÁî®Docker ComposeË®≠ÂÆö
# Sprint2 „ÉÜ„Çπ„Éà„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØÂØæÂøú

version: '3.8'

services:
  # „É°„Ç§„É≥E2E„ÉÜ„Çπ„Éà„Çµ„Éº„Éì„Çπ
  playwright:
    build:
      context: ..
      dockerfile: e2e/Dockerfile
      args:
        BUILD_DATE: $BUILD_DATE
        VCS_REF: $VCS_REF
        VERSION: $VERSION
    container_name: plantuml-e2e-playwright
    environment:
      # „ÉÜ„Çπ„ÉàÁí∞Â¢ÉË®≠ÂÆö
      NODE_ENV: test
      E2E_MODE: enabled
      BASE_URL: http://app:8086
      PLAYWRIGHT_BROWSERS_PATH: /ms-playwright
      
      # Êó•Êú¨Ë™ûÂØæÂøú
      LANG: ja_JP.UTF-8
      LC_ALL: ja_JP.UTF-8
      
      # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË®≠ÂÆö
      NODE_OPTIONS: --max-old-space-size=4096
      
      # „Éá„Éê„ÉÉ„Ç∞Ë®≠ÂÆö
      DEBUG: ${DEBUG:-}
      PWDEBUG: ${PWDEBUG:-}
      
      # CI/CDË®≠ÂÆö
      CI: ${CI:-false}
      GITHUB_ACTIONS: ${GITHUB_ACTIONS:-false}
    volumes:
      # „ÉÜ„Çπ„ÉàÁµêÊûú„Å®„É¨„Éù„Éº„Éà
      - ./test-results:/app/test-results
      - ./reports:/app/reports
      - ./auth:/app/auth
      
      # „ÉÜ„Çπ„Éà„Éï„Ç°„Ç§„É´ÔºàÈñãÁô∫ÊôÇÔºâ
      - ./tests:/app/tests:ro
      - ./page-objects:/app/page-objects:ro
      - ./fixtures:/app/fixtures:ro
      - ./setup:/app/setup:ro
      
      # Ë®≠ÂÆö„Éï„Ç°„Ç§„É´
      - ./playwright.config.js:/app/playwright.config.js:ro
      
      # ÂÖ±Êúâ„É°„É¢„É™ÔºàChromeÁî®Ôºâ
      - /dev/shm:/dev/shm
    depends_on:
      - app
    networks:
      - e2e-network
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    command: >
      sh -c "
        echo 'üöÄ E2E„ÉÜ„Çπ„ÉàÁí∞Â¢ÉÂàùÊúüÂåñ‰∏≠...'
        npm run test:health-check || echo '‚ö†Ô∏è „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØË≠¶Âëä'
        
        if [ \"$$CI\" = \"true\" ]; then
          echo 'ü§ñ CIÁí∞Â¢É„Åß„ÅÆ„ÉÜ„Çπ„ÉàÂÆüË°å'
          npm run test:e2e:ci
        else
          echo 'üíª ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÉÜ„Çπ„ÉàÂÆüË°å'
          npm run test:e2e
        fi
      "

  # „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çµ„Éº„Éì„ÇπÔºà„ÉÜ„Çπ„ÉàÂØæË±°Ôºâ
  app:
    image: node:20.18.0-alpine
    container_name: plantuml-e2e-app
    working_dir: /app
    environment:
      NODE_ENV: test
      PORT: 8086
      E2E_TEST_MODE: enabled
    volumes:
      - ../:/app:ro
      - ../node_modules:/app/node_modules:rw
    ports:
      - "8086:8086"
    networks:
      - e2e-network
    command: >
      sh -c "
        echo 'üì± „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Çµ„Éº„Éê„ÉºËµ∑Âãï‰∏≠...'
        npm install --production=false
        npm run start:test || npm run start:node
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8086"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # „É¢„ÉÉ„ÇØ„Çµ„Éº„Éì„ÇπÔºàAPI/Â§ñÈÉ®‰æùÂ≠òÈñ¢‰øÇÔºâ
  mock-service:
    image: node:20.18.0-alpine
    container_name: plantuml-e2e-mock
    working_dir: /app
    environment:
      NODE_ENV: test
      PORT: 3001
    volumes:
      - ./mocks:/app:ro
    ports:
      - "3001:3001"
    networks:
      - e2e-network
    command: >
      sh -c "
        echo 'üé≠ „É¢„ÉÉ„ÇØ„Çµ„Éº„Éì„ÇπËµ∑Âãï‰∏≠...'
        npm install express cors
        node mock-server.js
      "
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 15s
      timeout: 5s
      retries: 3

  # „É°„Éà„É™„ÇØ„ÇπÂèéÈõÜ„Çµ„Éº„Éì„Çπ
  prometheus:
    image: prom/prometheus:latest
    container_name: plantuml-e2e-metrics
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - e2e-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # „ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Çµ„Éº„Éì„Çπ
  grafana:
    image: grafana/grafana:latest
    container_name: plantuml-e2e-dashboard
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - e2e-network
    profiles:
      - monitoring

  # Allure„É¨„Éù„Éº„Éà„Çµ„Éº„Éì„Çπ
  allure:
    image: frankescobar/allure-docker-service
    container_name: plantuml-e2e-allure
    ports:
      - "5050:5050"
    environment:
      CHECK_RESULTS_EVERY_SECONDS: 3
      KEEP_HISTORY: 20
    volumes:
      - ./reports/allure-results:/app/allure-results
      - ./reports/allure-reports:/app/default-reports
    networks:
      - e2e-network
    profiles:
      - reporting

networks:
  e2e-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  playwright-cache:
    driver: local
  node-modules:
    driver: local
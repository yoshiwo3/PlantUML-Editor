/**
 * ActionEditor.js
 * 
 * „Ç¢„ÇØ„Ç∑„Éß„É≥Á∑®ÈõÜÁî®„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàÈõÜ
 * Êù°‰ª∂ÂàÜÂ≤ê„Éª„É´„Éº„Éó„Éª‰∏¶Ë°åÂá¶ÁêÜÂÜÖ„ÅÆ„Ç¢„ÇØ„Ç∑„Éß„É≥ÁÆ°ÁêÜ
 * SafeDOMManager„Çí‰ΩøÁî®„Åó„Å¶DOMÊìç‰Ωú„ÇíÂÆâÂÖ®Âåñ
 * 
 * @version 1.1.0 - SafeDOMManagerÁµ±ÂêàÁâà
 * @date 2025-08-15
 */

// SafeDOMManager„ÅåÂà©Áî®ÂèØËÉΩ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
if (typeof window !== 'undefined' && !window.SafeDOMManager) {
    console.error('[ActionEditor] SafeDOMManager is required but not found');
}

/**
 * ActionList - „Ç¢„ÇØ„Ç∑„Éß„É≥‰∏ÄË¶ßË°®Á§∫„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
 */
class ActionList {
    constructor(container, actions = [], options = {}) {
        this.container = container;
        this.actions = actions;
        this.options = {
            editable: true,
            draggable: true,
            deletable: true,
            addable: true,
            ...options
        };
        
        this.selectedAction = null;
        this.listeners = new Map();
        
        // SafeDOMManager „Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
        this.safeDOMManager = new window.SafeDOMManager({
            enableLogging: true,
            strictMode: false
        });
        
        this.initialize();
    }

    /**
     * ÂàùÊúüÂåñ
     */
    initialize() {
        this.render();
        this.setupEventListeners();
    }

    /**
     * „É¨„É≥„ÉÄ„É™„É≥„Ç∞ÔºàSafeDOMManager‰ΩøÁî®Ôºâ
     */
    render() {
        // „Ç≥„É≥„ÉÜ„Éä„Çí„ÇØ„É™„Ç¢
        this.container.innerHTML = '';
        
        // „Éò„ÉÉ„ÉÄ„Éº‰ΩúÊàê
        const header = this.safeDOMManager.createElement('div', {
            'class': 'action-list-header'
        });
        
        // „Çø„Ç§„Éà„É´‰ΩúÊàê
        const title = this.safeDOMManager.createElement('h4', {}, '„Ç¢„ÇØ„Ç∑„Éß„É≥‰∏ÄË¶ß');
        header.appendChild(title);
        
        // ËøΩÂä†„Éú„Çø„É≥‰ΩúÊàêÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
        if (this.options.addable) {
            const addButton = this.safeDOMManager.createElement('button', {
                'class': 'btn-add-action',
                'title': 'Êñ∞Ë¶è„Ç¢„ÇØ„Ç∑„Éß„É≥ËøΩÂä†'
            }, '+');
            header.appendChild(addButton);
        }
        
        this.container.appendChild(header);
        
        // „Ç¢„ÇØ„Ç∑„Éß„É≥„É™„Çπ„Éà„Ç≥„É≥„ÉÜ„Éä‰ΩúÊàê
        const listContainer = this.safeDOMManager.createElement('div', {
            'class': 'action-list-container'
        });
        
        if (this.actions.length === 0) {
            // Á©∫„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
            const emptyMessage = this.safeDOMManager.createElement('div', {
                'class': 'action-list-empty'
            }, '„Ç¢„ÇØ„Ç∑„Éß„É≥„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
            listContainer.appendChild(emptyMessage);
        } else {
            // „Ç¢„ÇØ„Ç∑„Éß„É≥„É™„Çπ„Éà‰ΩúÊàê
            const ul = this.safeDOMManager.createElement('ul', {
                'class': 'action-list'
            });
            
            this.actions.forEach((action, index) => {
                const li = this.createActionItem(action, index);
                ul.appendChild(li);
            });
            
            listContainer.appendChild(ul);
        }
        
        this.container.appendChild(listContainer);
        
        // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóË®≠ÂÆö
        if (this.options.draggable) {
            this.setupDragAndDrop();
        }
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥„Ç¢„Ç§„ÉÜ„É†‰ΩúÊàê
     */
    createActionItem(action, index) {
        const li = document.createElement('li');
        li.className = 'action-item';
        li.dataset.index = index;
        li.dataset.actionId = action.id || `action_${index}`;
        
        if (this.options.draggable) {
            li.draggable = true;
        }
        
        // „Ç¢„ÇØ„Ç∑„Éß„É≥„Çø„Ç§„Éó„Ç¢„Ç§„Ç≥„É≥
        const icon = this.getActionIcon(action.type);
        
        // „Ç¢„ÇØ„Ç∑„Éß„É≥ÂÜÖÂÆπ
        const content = document.createElement('div');
        content.className = 'action-item-content';
        content.innerHTML = `
            <span class="action-icon">${icon}</span>
            <span class="action-label">${this.getActionLabel(action)}</span>
        `;
        
        // „Ç≥„É≥„Éà„É≠„Éº„É´„Éú„Çø„É≥
        const controls = document.createElement('div');
        controls.className = 'action-item-controls';
        
        if (this.options.editable) {
            controls.innerHTML += `
                <button class="btn-edit-action" title="Á∑®ÈõÜ">‚úèÔ∏è</button>
            `;
        }
        
        if (this.options.deletable) {
            controls.innerHTML += `
                <button class="btn-delete-action" title="ÂâäÈô§">üóëÔ∏è</button>
            `;
        }
        
        li.appendChild(content);
        li.appendChild(controls);
        
        return li;
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥„Ç¢„Ç§„Ç≥„É≥ÂèñÂæó
     */
    getActionIcon(type) {
        const iconMap = {
            'message': 'üì®',
            'condition': '‚ùì',
            'loop': 'üîÑ',
            'parallel': '‚ö°',
            'note': 'üìù',
            'delay': '‚è±Ô∏è',
            'activate': '‚ñ∂Ô∏è',
            'deactivate': '‚è∏Ô∏è',
            'return': '‚Ü©Ô∏è',
            'group': 'üìÅ',
            'default': 'üìå'
        };
        
        return iconMap[type] || iconMap.default;
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥„É©„Éô„É´ÂèñÂæó
     */
    getActionLabel(action) {
        if (action.label) {
            return action.label;
        }
        
        switch (action.type) {
            case 'message':
                return `${action.from} ‚Üí ${action.to}: ${action.message}`;
            case 'condition':
                return `Êù°‰ª∂: ${action.condition}`;
            case 'loop':
                return `„É´„Éº„Éó: ${action.loopCondition}`;
            case 'parallel':
                return `‰∏¶Ë°åÂá¶ÁêÜ (${action.threads ? action.threads.length : 0}„Çπ„É¨„ÉÉ„Éâ)`;
            case 'note':
                return `„Éé„Éº„Éà: ${action.text}`;
            case 'delay':
                return `ÈÅÖÂª∂: ${action.duration || '...'}`;
            default:
                return action.description || action.type;
        }
    }

    /**
     * „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„ÉóË®≠ÂÆö
     */
    setupDragAndDrop() {
        const list = this.container.querySelector('.action-list');
        if (!list) return;
        
        let draggedItem = null;
        let draggedIndex = null;
        
        // „Éâ„É©„ÉÉ„Ç∞ÈñãÂßã
        list.addEventListener('dragstart', (e) => {
            if (e.target.classList.contains('action-item')) {
                draggedItem = e.target;
                draggedIndex = parseInt(e.target.dataset.index);
                e.target.classList.add('dragging');
                e.dataTransfer.effectAllowed = 'move';
                e.dataTransfer.setData('text/html', e.target.innerHTML);
            }
        });
        
        // „Éâ„É©„ÉÉ„Ç∞‰∏≠
        list.addEventListener('dragover', (e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            
            const afterElement = this.getDragAfterElement(list, e.clientY);
            if (afterElement == null) {
                list.appendChild(draggedItem);
            } else {
                list.insertBefore(draggedItem, afterElement);
            }
        });
        
        // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫Ü
        list.addEventListener('dragend', (e) => {
            if (e.target.classList.contains('action-item')) {
                e.target.classList.remove('dragging');
                
                // Êñ∞„Åó„ÅÑÈ†ÜÂ∫è„ÇíË®àÁÆó
                const newOrder = Array.from(list.querySelectorAll('.action-item'))
                    .map(item => parseInt(item.dataset.index));
                
                // È†ÜÂ∫èÂ§âÊõ¥„Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
                this.triggerEvent('orderChanged', {
                    oldIndex: draggedIndex,
                    newOrder: newOrder
                });
                
                // „Ç¢„ÇØ„Ç∑„Éß„É≥ÈÖçÂàó„Çí‰∏¶„Å≥Êõø„Åà
                this.reorderActions(newOrder);
                
                draggedItem = null;
                draggedIndex = null;
            }
        });
    }

    /**
     * „Éâ„É©„ÉÉ„Ç∞‰ΩçÁΩÆ„Åã„ÇâÊåøÂÖ•‰ΩçÁΩÆ„ÇíË®àÁÆó
     */
    getDragAfterElement(container, y) {
        const draggableElements = [...container.querySelectorAll('.action-item:not(.dragging)')];
        
        return draggableElements.reduce((closest, child) => {
            const box = child.getBoundingClientRect();
            const offset = y - box.top - box.height / 2;
            
            if (offset < 0 && offset > closest.offset) {
                return { offset: offset, element: child };
            } else {
                return closest;
            }
        }, { offset: Number.NEGATIVE_INFINITY }).element;
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥‰∏¶„Å≥Êõø„Åà
     */
    reorderActions(newOrder) {
        const reorderedActions = newOrder.map(index => this.actions[index]);
        this.actions = reorderedActions;
        this.render();
    }

    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
     */
    setupEventListeners() {
        // ËøΩÂä†„Éú„Çø„É≥
        const addBtn = this.container.querySelector('.btn-add-action');
        if (addBtn) {
            addBtn.addEventListener('click', () => {
                this.triggerEvent('addAction');
            });
        }
        
        // Á∑®ÈõÜ„ÉªÂâäÈô§„Éú„Çø„É≥
        this.container.addEventListener('click', (e) => {
            const actionItem = e.target.closest('.action-item');
            if (!actionItem) return;
            
            const index = parseInt(actionItem.dataset.index);
            const action = this.actions[index];
            
            if (e.target.classList.contains('btn-edit-action')) {
                this.triggerEvent('editAction', { action, index });
            } else if (e.target.classList.contains('btn-delete-action')) {
                this.triggerEvent('deleteAction', { action, index });
            }
        });
        
        // „Ç¢„Ç§„ÉÜ„É†ÈÅ∏Êäû
        this.container.addEventListener('click', (e) => {
            const actionItem = e.target.closest('.action-item');
            if (actionItem && !e.target.closest('.action-item-controls')) {
                this.selectAction(actionItem);
            }
        });
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥ÈÅ∏Êäû
     */
    selectAction(item) {
        // Êó¢Â≠ò„ÅÆÈÅ∏Êäû„ÇíËß£Èô§
        this.container.querySelectorAll('.action-item.selected').forEach(el => {
            el.classList.remove('selected');
        });
        
        // Êñ∞„Åó„ÅÑÈÅ∏Êäû
        item.classList.add('selected');
        const index = parseInt(item.dataset.index);
        this.selectedAction = this.actions[index];
        
        this.triggerEvent('selectAction', { 
            action: this.selectedAction, 
            index 
        });
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥ËøΩÂä†
     */
    addAction(action) {
        this.actions.push(action);
        this.render();
        this.triggerEvent('actionsChanged', { actions: this.actions });
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥Êõ¥Êñ∞
     */
    updateAction(index, action) {
        if (index >= 0 && index < this.actions.length) {
            this.actions[index] = action;
            this.render();
            this.triggerEvent('actionsChanged', { actions: this.actions });
        }
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥ÂâäÈô§
     */
    deleteAction(index) {
        if (index >= 0 && index < this.actions.length) {
            this.actions.splice(index, 1);
            this.render();
            this.triggerEvent('actionsChanged', { actions: this.actions });
        }
    }

    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
     */
    addEventListener(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }

    /**
     * „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
     */
    triggerEvent(event, data) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(callback => {
                callback(data);
            });
        }
    }

    /**
     * „Ç¢„ÇØ„Ç∑„Éß„É≥ÂèñÂæó
     */
    getActions() {
        return this.actions;
    }

    /**
     * „ÇØ„É™„Ç¢
     */
    clear() {
        this.actions = [];
        this.selectedAction = null;
        this.render();
    }

    /**
     * Á†¥Ê£Ñ
     */
    destroy() {
        this.container.innerHTML = '';
        this.listeners.clear();
    }
}

/**
 * ActionForm - „Ç¢„ÇØ„Ç∑„Éß„É≥ËøΩÂä†„ÉªÁ∑®ÈõÜ„Éï„Ç©„Éº„É†
 */
class ActionForm {
    constructor(container, action = null, options = {}) {
        this.container = container;
        this.action = action || {};
        this.options = {
            mode: action ? 'edit' : 'add',
            types: ['message', 'note', 'delay', 'activate', 'deactivate', 'return'],
            actors: [],
            ...options
        };
        
        this.listeners = new Map();
        this.initialize();
    }

    /**
     * ÂàùÊúüÂåñ
     */
    initialize() {
        this.render();
        this.setupEventListeners();
        this.loadFormData();
    }

    /**
     * „É¨„É≥„ÉÄ„É™„É≥„Ç∞
     */
    render() {
        const title = this.options.mode === 'edit' ? '„Ç¢„ÇØ„Ç∑„Éß„É≥Á∑®ÈõÜ' : 'Êñ∞Ë¶è„Ç¢„ÇØ„Ç∑„Éß„É≥';
        
        this.container.innerHTML = `
            <div class="action-form">
                <div class="action-form-header">
                    <h4>${title}</h4>
                </div>
                <div class="action-form-body">
                    <div class="form-group">
                        <label for="action-type">„Ç¢„ÇØ„Ç∑„Éß„É≥„Çø„Ç§„Éó</label>
                        <select id="action-type" class="form-control">
                            ${this.options.types.map(type => 
                                `<option value="${type}" ${this.action.type === type ? 'selected' : ''}>
                                    ${this.getTypeLabel(type)}
                                </option>`
                            ).join('')}
                        </select>
                    </div>
                    
                    <div id="type-specific-fields">
                        <!-- „Çø„Ç§„ÉóÂà•„Éï„Ç£„Éº„É´„Éâ„ÅåÂãïÁöÑ„Å´ÊåøÂÖ•„Åï„Çå„Çã -->
                    </div>
                    
                    <div class="form-group">
                        <label for="action-description">Ë™¨ÊòéÔºà‰ªªÊÑèÔºâ</label>
                        <input type="text" id="action-description" class="form-control" 
                               value="${this.action.description || ''}" 
                               placeholder="„Ç¢„ÇØ„Ç∑„Éß„É≥„ÅÆË™¨Êòé„ÇíÂÖ•Âäõ">
                    </div>
                </div>
                <div class="action-form-footer">
                    <button class="btn btn-primary btn-save">‰øùÂ≠ò</button>
                    <button class="btn btn-secondary btn-cancel">„Ç≠„É£„É≥„Çª„É´</button>
                </div>
            </div>
        `;
        
        // ÂàùÊúü„Çø„Ç§„Éó„ÅÆ„Éï„Ç£„Éº„É´„Éâ„ÇíË°®Á§∫
        this.updateTypeSpecificFields(this.action.type || this.options.types[0]);
    }

    /**
     * „Çø„Ç§„Éó„É©„Éô„É´ÂèñÂæó
     */
    getTypeLabel(type) {
        const labels = {
            'message': '„É°„ÉÉ„Çª„Éº„Ç∏',
            'note': '„Éé„Éº„Éà',
            'delay': 'ÈÅÖÂª∂',
            'activate': '„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà',
            'deactivate': '„Éá„Ç£„Ç¢„ÇØ„ÉÜ„Ç£„Éô„Éº„Éà',
            'return': '„É™„Çø„Éº„É≥'
        };
        return labels[type] || type;
    }

    /**
     * „Çø„Ç§„ÉóÂà•„Éï„Ç£„Éº„É´„ÉâÊõ¥Êñ∞
     */
    updateTypeSpecificFields(type) {
        const container = this.container.querySelector('#type-specific-fields');
        
        switch (type) {
            case 'message':
                container.innerHTML = `
                    <div class="form-group">
                        <label for="action-from">ÈÄÅ‰ø°ÂÖÉ</label>
                        <select id="action-from" class="form-control">
                            ${this.renderActorOptions(this.action.from)}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="action-to">ÈÄÅ‰ø°ÂÖà</label>
                        <select id="action-to" class="form-control">
                            ${this.renderActorOptions(this.action.to)}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="action-message">„É°„ÉÉ„Çª„Éº„Ç∏</label>
                        <input type="text" id="action-message" class="form-control" 
                               value="${this.action.message || ''}" 
                               placeholder="„É°„ÉÉ„Çª„Éº„Ç∏ÂÜÖÂÆπ">
                    </div>
                    <div class="form-group">
                        <label for="action-arrow">Áü¢Âç∞„Çø„Ç§„Éó</label>
                        <select id="action-arrow" class="form-control">
                            <option value="->" ${this.action.arrow === '->' ? 'selected' : ''}>ÂêåÊúü (->)</option>
                            <option value="-->" ${this.action.arrow === '-->' ? 'selected' : ''}>ÈùûÂêåÊúü (-->)</option>
                            <option value="->>" ${this.action.arrow === '->>' ? 'selected' : ''}>ÂøúÁ≠î (->>)</option>
                            <option value="-->>

" ${this.action.arrow === '-->>' ? 'selected' : ''}>ÈùûÂêåÊúüÂøúÁ≠î (-->>)</option>
                        </select>
                    </div>
                `;
                break;
                
            case 'note':
                container.innerHTML = `
                    <div class="form-group">
                        <label for="action-note-position">‰ΩçÁΩÆ</label>
                        <select id="action-note-position" class="form-control">
                            <option value="right" ${this.action.position === 'right' ? 'selected' : ''}>Âè≥</option>
                            <option value="left" ${this.action.position === 'left' ? 'selected' : ''}>Â∑¶</option>
                            <option value="over" ${this.action.position === 'over' ? 'selected' : ''}>‰∏ä</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="action-note-actor">ÂØæË±°„Ç¢„ÇØ„Çø„Éº</label>
                        <select id="action-note-actor" class="form-control">
                            ${this.renderActorOptions(this.action.actor)}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="action-note-text">„Éé„Éº„ÉàÂÜÖÂÆπ</label>
                        <textarea id="action-note-text" class="form-control" rows="3"
                                  placeholder="„Éé„Éº„Éà„ÅÆÂÜÖÂÆπ">${this.action.text || ''}</textarea>
                    </div>
                `;
                break;
                
            case 'delay':
                container.innerHTML = `
                    <div class="form-group">
                        <label for="action-delay-text">ÈÅÖÂª∂„ÉÜ„Ç≠„Çπ„ÉàÔºà‰ªªÊÑèÔºâ</label>
                        <input type="text" id="action-delay-text" class="form-control" 
                               value="${this.action.text || ''}" 
                               placeholder="ÈÅÖÂª∂„ÅÆË™¨ÊòéÔºàÁúÅÁï•ÂèØÔºâ">
                    </div>
                `;
                break;
                
            case 'activate':
            case 'deactivate':
                container.innerHTML = `
                    <div class="form-group">
                        <label for="action-activate-actor">ÂØæË±°„Ç¢„ÇØ„Çø„Éº</label>
                        <select id="action-activate-actor" class="form-control">
                            ${this.renderActorOptions(this.action.actor)}
                        </select>
                    </div>
                `;
                break;
                
            case 'return':
                container.innerHTML = `
                    <div class="form-group">
                        <label for="action-return-message">„É™„Çø„Éº„É≥„É°„ÉÉ„Çª„Éº„Ç∏</label>
                        <input type="text" id="action-return-message" class="form-control" 
                               value="${this.action.message || ''}" 
                               placeholder="„É™„Çø„Éº„É≥ÂÄ§„ÇÑ„É°„ÉÉ„Çª„Éº„Ç∏">
                    </div>
                `;
                break;
                
            default:
                container.innerHTML = '';
        }
    }

    /**
     * „Ç¢„ÇØ„Çø„Éº„Ç™„Éó„Ç∑„Éß„É≥ÁîüÊàê
     */
    renderActorOptions(selected) {
        if (this.options.actors.length === 0) {
            return '<option value="">„Ç¢„ÇØ„Çø„Éº„ÅåÂÆöÁæ©„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì</option>';
        }
        
        return this.options.actors.map(actor => 
            `<option value="${actor.id || actor.name}" 
                    ${(selected === actor.id || selected === actor.name) ? 'selected' : ''}>
                ${actor.displayName || actor.name}
            </option>`
        ).join('');
    }

    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºË®≠ÂÆö
     */
    setupEventListeners() {
        // „Çø„Ç§„ÉóÂ§âÊõ¥
        const typeSelect = this.container.querySelector('#action-type');
        typeSelect.addEventListener('change', (e) => {
            this.updateTypeSpecificFields(e.target.value);
        });
        
        // ‰øùÂ≠ò„Éú„Çø„É≥
        const saveBtn = this.container.querySelector('.btn-save');
        saveBtn.addEventListener('click', () => {
            this.save();
        });
        
        // „Ç≠„É£„É≥„Çª„É´„Éú„Çø„É≥
        const cancelBtn = this.container.querySelector('.btn-cancel');
        cancelBtn.addEventListener('click', () => {
            this.triggerEvent('cancel');
        });
    }

    /**
     * „Éï„Ç©„Éº„É†„Éá„Éº„ÇøË™≠„ÅøËæº„Åø
     */
    loadFormData() {
        if (this.action && this.action.type) {
            const typeSelect = this.container.querySelector('#action-type');
            typeSelect.value = this.action.type;
            this.updateTypeSpecificFields(this.action.type);
        }
    }

    /**
     * ‰øùÂ≠òÂá¶ÁêÜ
     */
    save() {
        const formData = this.collectFormData();
        
        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        const validation = this.validate(formData);
        if (!validation.valid) {
            this.showValidationErrors(validation.errors);
            return;
        }
        
        // „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
        this.triggerEvent('save', { 
            action: formData, 
            mode: this.options.mode 
        });
    }

    /**
     * „Éï„Ç©„Éº„É†„Éá„Éº„ÇøÂèéÈõÜ
     */
    collectFormData() {
        const data = {
            type: this.container.querySelector('#action-type').value,
            description: this.container.querySelector('#action-description').value
        };
        
        // Êó¢Â≠ò„ÅÆID„Åå„ÅÇ„Çå„Å∞‰øùÊåÅ
        if (this.action.id) {
            data.id = this.action.id;
        }
        
        // „Çø„Ç§„ÉóÂà•„ÅÆ„Éá„Éº„ÇøÂèéÈõÜ
        switch (data.type) {
            case 'message':
                data.from = this.container.querySelector('#action-from')?.value;
                data.to = this.container.querySelector('#action-to')?.value;
                data.message = this.container.querySelector('#action-message')?.value;
                data.arrow = this.container.querySelector('#action-arrow')?.value;
                break;
                
            case 'note':
                data.position = this.container.querySelector('#action-note-position')?.value;
                data.actor = this.container.querySelector('#action-note-actor')?.value;
                data.text = this.container.querySelector('#action-note-text')?.value;
                break;
                
            case 'delay':
                data.text = this.container.querySelector('#action-delay-text')?.value;
                break;
                
            case 'activate':
            case 'deactivate':
                data.actor = this.container.querySelector('#action-activate-actor')?.value;
                break;
                
            case 'return':
                data.message = this.container.querySelector('#action-return-message')?.value;
                break;
        }
        
        return data;
    }

    /**
     * „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
     */
    validate(data) {
        const errors = [];
        
        // ÂÖ±ÈÄö„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        if (!data.type) {
            errors.push({ field: 'type', message: '„Ç¢„ÇØ„Ç∑„Éß„É≥„Çø„Ç§„Éó„ÅØÂøÖÈ†à„Åß„Åô' });
        }
        
        // „Çø„Ç§„ÉóÂà•„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        switch (data.type) {
            case 'message':
                if (!data.from) {
                    errors.push({ field: 'from', message: 'ÈÄÅ‰ø°ÂÖÉ„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                if (!data.to) {
                    errors.push({ field: 'to', message: 'ÈÄÅ‰ø°ÂÖà„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                if (!data.message) {
                    errors.push({ field: 'message', message: '„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                break;
                
            case 'note':
                if (!data.actor) {
                    errors.push({ field: 'actor', message: 'ÂØæË±°„Ç¢„ÇØ„Çø„Éº„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                if (!data.text) {
                    errors.push({ field: 'text', message: '„Éé„Éº„ÉàÂÜÖÂÆπ„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                break;
                
            case 'activate':
            case 'deactivate':
                if (!data.actor) {
                    errors.push({ field: 'actor', message: 'ÂØæË±°„Ç¢„ÇØ„Çø„Éº„ÅØÂøÖÈ†à„Åß„Åô' });
                }
                break;
        }
        
        return {
            valid: errors.length === 0,
            errors: errors
        };
    }

    /**
     * „Éê„É™„Éá„Éº„Ç∑„Éß„É≥„Ç®„É©„ÉºË°®Á§∫
     */
    showValidationErrors(errors) {
        // Êó¢Â≠ò„ÅÆ„Ç®„É©„ÉºË°®Á§∫„Çí„ÇØ„É™„Ç¢
        this.container.querySelectorAll('.form-error').forEach(el => el.remove());
        this.container.querySelectorAll('.has-error').forEach(el => el.classList.remove('has-error'));
        
        // „Ç®„É©„ÉºË°®Á§∫
        errors.forEach(error => {
            const field = this.container.querySelector(`#action-${error.field}`);
            if (field) {
                field.classList.add('has-error');
                const errorEl = document.createElement('div');
                errorEl.className = 'form-error';
                errorEl.textContent = error.message;
                field.parentElement.appendChild(errorEl);
            }
        });
    }

    /**
     * „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÁôªÈå≤
     */
    addEventListener(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, []);
        }
        this.listeners.get(event).push(callback);
    }

    /**
     * „Ç§„Éô„É≥„ÉàÁô∫ÁÅ´
     */
    triggerEvent(event, data) {
        if (this.listeners.has(event)) {
            this.listeners.get(event).forEach(callback => {
                callback(data);
            });
        }
    }

    /**
     * Á†¥Ê£Ñ
     */
    destroy() {
        this.container.innerHTML = '';
        this.listeners.clear();
    }
}

// „Ç∞„É≠„Éº„Éê„É´„Å´ÂÖ¨Èñã
if (typeof window !== 'undefined') {
    window.ActionList = ActionList;
    window.ActionForm = ActionForm;
}

// ES6„É¢„Ç∏„É•„Éº„É´„Å®„Åó„Å¶„ÇÇ„Ç®„ÇØ„Çπ„Éù„Éº„Éà
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        ActionList,
        ActionForm
    };
}
# PlantUML Editor - Unit Test CI/CD Workflow
# Sprint 1 単体テスト環境 - GitHub Actions設定
# 
# 実行対象: 
#   - 単体テスト (Jest)
#   - カバレッジレポート生成
#   - テスト結果の可視化
# 
# 作成日: 2025-08-15
# 作成者: webapp-test-automation

name: Unit Test CI

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - '**.js'
      - '**/*test.js'
      - '**/*spec.js'
      - 'package*.json'
      - 'jest.config.js'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.js'
      - '**/*test.js'  
      - '**/*spec.js'
      - 'package*.json'
      - 'jest.config.js'

# Concurrency制御 - 同一PRでの重複実行防止
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===============================
  # Job 1: 単体テスト実行
  # ===============================
  unit-tests:
    name: Unit Tests (Sprint 1)
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
      fail-fast: false

    steps:
    # ソースコード取得
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Node.js環境設定
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './package-lock.json'

    # キャッシュ設定
    - name: Cache node_modules
      uses: actions/cache@v3
      id: cache-node-modules
      with:
        path: node_modules
        key: node-modules-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          node-modules-${{ matrix.node-version }}-

    # 依存関係インストール
    - name: Install dependencies
      if: steps.cache-node-modules.outputs.cache-hit != 'true'
      run: npm ci

    # Jest設定検証
    - name: Validate Jest configuration
      run: |
        echo "Validating Jest configuration..."
        npx jest --showConfig
        echo "✅ Jest configuration is valid"

    # 単体テスト実行（タイムアウト: 5分）
    - name: Run unit tests
      run: |
        echo "🧪 Running Sprint 1 unit tests..."
        npm run test:unit:coverage
      timeout-minutes: 5
      env:
        CI: true
        JEST_VERBOSE: false

    # テスト結果の解析
    - name: Analyze test results
      run: |
        echo "📊 Test Results Analysis:"
        if [ -f "coverage/test-report.html" ]; then
          echo "✅ HTML test report generated"
        fi
        if [ -f "coverage/junit.xml" ]; then
          echo "✅ JUnit XML report generated"
          # JUnit結果の概要表示
          if command -v xmllint > /dev/null; then
            xmllint --xpath "//testsuite/@tests | //testsuite/@failures | //testsuite/@errors" coverage/junit.xml 2>/dev/null || true
          fi
        fi

    # カバレッジレポート生成
    - name: Generate coverage report
      run: |
        echo "📈 Generating coverage report..."
        if [ -d "coverage" ]; then
          echo "Coverage Summary:"
          cat coverage/coverage-summary.json | head -20 || true
          echo "✅ Coverage report generated successfully"
        else
          echo "❌ Coverage directory not found"
          exit 1
        fi

    # カバレッジ閾値チェック
    - name: Check coverage thresholds
      run: |
        echo "🎯 Checking coverage thresholds (CLAUDE.md standard: 80%)..."
        npm run test:coverage -- --verbose
      continue-on-error: true

    # テストアーティファクト保存
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-node-${{ matrix.node-version }}
        path: |
          coverage/
          test-results/
        retention-days: 14

    # JUnit テスト結果公開
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Unit Test Results (Node.js ${{ matrix.node-version }})
        path: coverage/junit.xml
        reporter: java-junit
        fail-on-error: false

    # カバレッジレポート公開（Node.js 20のみ）
    - name: Upload coverage reports to Codecov
      if: matrix.node-version == '20.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-unit-tests
        fail_ci_if_error: false

  # ===============================
  # Job 2: セキュリティテスト特化
  # ===============================
  security-tests:
    name: Security Unit Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # セキュリティ特化テスト実行
    - name: Run security-focused tests
      run: |
        echo "🔒 Running security unit tests..."
        npm run test:unit -- --testPathPattern="security" --verbose
      env:
        CI: true

    # XSS防御テスト
    - name: Run XSS protection tests  
      run: |
        echo "🛡️ Testing XSS protection..."
        npm run test:unit -- --testNamePattern="XSS|sanitize|DOMPurify" --verbose

    # CSP検証テスト
    - name: Run CSP validation tests
      run: |
        echo "🔐 Testing CSP validation..."
        npm run test:unit -- --testNamePattern="CSP|Content.*Security.*Policy" --verbose

    # セキュリティテスト結果保存
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-test-results
        path: coverage/
        retention-days: 7

  # ===============================
  # Job 3: パフォーマンステスト
  # ===============================
  performance-tests:
    name: Performance Tests (5s threshold)
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    # パフォーマンステスト実行（CLAUDE.md基準: 5秒以内）
    - name: Run performance tests
      run: |
        echo "⏱️ Running performance tests (CLAUDE.md 5s threshold)..."
        npm run test:unit -- --testNamePattern="performance|Performance" --verbose
      env:
        CI: true
        PERFORMANCE_THRESHOLD: 5000

    # 大量データ処理テスト
    - name: Run bulk operation tests
      run: |
        echo "📊 Testing bulk operations..."
        npm run test:unit -- --testNamePattern="bulk|large|大量" --verbose

    # パフォーマンス結果の解析
    - name: Analyze performance results
      run: |
        echo "📈 Analyzing performance test results..."
        echo "Performance threshold: 5 seconds (CLAUDE.md standard)"
        echo "✅ Performance tests completed"

  # ===============================
  # Job 4: テスト結果統合
  # ===============================
  test-summary:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, performance-tests]
    if: always()

    steps:
    - name: Download all test artifacts
      uses: actions/download-artifact@v3

    # 統合レポート生成
    - name: Generate integrated test report
      run: |
        echo "📊 Generating integrated test report..."
        echo "## Sprint 1 Unit Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "### Test Execution Status" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md  
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "- Performance Tests: ${{ needs.performance-tests.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "### Coverage Information" >> test-summary.md
        
        # カバレッジ情報の統合（利用可能な場合）
        if [ -d "test-results-node-20.x/coverage" ]; then
          echo "Coverage reports available in artifacts" >> test-summary.md
        fi
        
        echo "" >> test-summary.md
        echo "### Artifacts Generated" >> test-summary.md
        echo "- Test Results (Node.js 18.x, 20.x)" >> test-summary.md
        echo "- Security Test Results" >> test-summary.md
        echo "- Coverage Reports (LCOV, HTML, JSON)" >> test-summary.md
        echo "" >> test-summary.md
        echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> test-summary.md

    # PRコメント用のレポート作成
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-summary.md')) {
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🧪 Sprint 1 Unit Test Results\n\n${summary}`
            });
          }

    # 統合レポート保存
    - name: Upload integrated test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30

  # ===============================
  # Job 5: 品質ゲート
  # ===============================
  quality-gate:
    name: Quality Gate (Sprint 1)
    runs-on: ubuntu-latest
    needs: [unit-tests, security-tests, performance-tests]

    steps:
    - name: Quality gate evaluation
      run: |
        echo "🚪 Evaluating quality gate for Sprint 1..."
        
        # テスト結果の確認
        UNIT_TESTS="${{ needs.unit-tests.result }}"
        SECURITY_TESTS="${{ needs.security-tests.result }}"
        PERFORMANCE_TESTS="${{ needs.performance-tests.result }}"
        
        echo "Unit Tests: $UNIT_TESTS"
        echo "Security Tests: $SECURITY_TESTS"  
        echo "Performance Tests: $PERFORMANCE_TESTS"
        
        # 品質ゲートの判定
        FAILED=false
        
        if [ "$UNIT_TESTS" != "success" ]; then
          echo "❌ Unit tests failed or were cancelled"
          FAILED=true
        fi
        
        if [ "$SECURITY_TESTS" != "success" ]; then
          echo "❌ Security tests failed or were cancelled"
          FAILED=true
        fi
        
        if [ "$PERFORMANCE_TESTS" != "success" ]; then
          echo "❌ Performance tests failed or were cancelled"
          FAILED=true
        fi
        
        if [ "$FAILED" = true ]; then
          echo "🚫 Quality gate FAILED - Sprint 1 requirements not met"
          exit 1
        else
          echo "✅ Quality gate PASSED - Sprint 1 ready for next phase"
        fi

    # Slack通知（オプション：トークンが設定されている場合のみ）
    - name: Notify Slack on failure
      if: failure()
      run: |
        echo "Quality gate failed - Sprint 1 unit tests need attention"
        # Slack webhook実装はオプション

# ===============================
# 環境変数定義
# ===============================
env:
  # Node.js設定
  NODE_ENV: test
  CI: true
  
  # Jest設定
  JEST_JUNIT_OUTPUT_DIR: ./coverage
  JEST_JUNIT_OUTPUT_NAME: junit.xml
  
  # カバレッジ設定
  COVERAGE_THRESHOLD: 80
  
  # パフォーマンス設定
  PERFORMANCE_TIMEOUT: 5000
  
  # セキュリティ設定
  SECURITY_SCAN_ENABLED: true
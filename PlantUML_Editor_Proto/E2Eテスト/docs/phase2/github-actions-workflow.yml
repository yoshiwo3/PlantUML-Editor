# PlantUMLエディタ E2Eテスト Phase2 - GitHub Actions CI/CD設定
# 既存の成功環境（10/10成功）をベースとしたCI/CD統合

name: 'PlantUML Editor E2E Tests - Phase 2'

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - 'PlantUML_Editor_Proto/**'
      - 'jp2plantuml/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'PlantUML_Editor_Proto/**'
      - 'jp2plantuml/**'
  schedule:
    # 毎日午前2時（JST 11時）に実行
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'テストスイート選択'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - basic
          - sync
          - complex-flows
          - performance
      browser:
        description: 'ブラウザ選択'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - msedge
          - all-browsers

env:
  BASE_URL: http://localhost:8086
  NODE_ENV: test
  PLAYWRIGHT_BROWSERS_PATH: /ms/playwright

jobs:
  # アプリケーション起動とヘルスチェック
  prepare-environment:
    runs-on: ubuntu-latest
    outputs:
      app-ready: ${{ steps.health-check.outputs.ready }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'jp2plantuml/package.json'
      
      - name: Install application dependencies
        working-directory: jp2plantuml
        run: npm ci
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm start &
          echo "APPLICATION_PID=$!" >> $GITHUB_ENV
        
      - name: Wait for application startup
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:8086; do sleep 2; done'
          echo "Application started successfully"
        
      - name: Health check
        id: health-check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8086)
          if [ "$response" = "200" ]; then
            echo "ready=true" >> $GITHUB_OUTPUT
            echo "✅ Application health check passed"
          else
            echo "ready=false" >> $GITHUB_OUTPUT
            echo "❌ Application health check failed: HTTP $response"
            exit 1
          fi

  # 基本テスト（既存の成功テスト）
  basic-tests:
    needs: prepare-environment
    if: needs.prepare-environment.outputs.app-ready == 'true'
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js in container
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
      - name: Install test dependencies
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npx playwright install ${{ matrix.browser }}
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm ci
          npm start &
          sleep 10
          curl -f http://localhost:8086 || (echo "App startup failed" && exit 1)
        
      - name: Run basic E2E tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: node test-docker.js ${{ matrix.browser }}
        
      - name: Upload basic test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: basic-test-results-${{ matrix.browser }}
          path: |
            PlantUML_Editor_Proto/E2Eテスト/test-results/
            PlantUML_Editor_Proto/E2Eテスト/screenshots/
          retention-days: 30

  # Phase2 同期機能テスト
  sync-functionality-tests:
    needs: [prepare-environment, basic-tests]
    if: needs.prepare-environment.outputs.app-ready == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'sync' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js in container
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
      - name: Install test dependencies
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npx playwright install ${{ matrix.browser }}
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm ci
          npm start &
          sleep 10
          curl -f http://localhost:8086 || (echo "App startup failed" && exit 1)
        
      - name: Run sync functionality tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト/docs/phase2
        run: node test-sync-functionality.js ${{ matrix.browser }}
        
      - name: Upload sync test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-test-results-${{ matrix.browser }}
          path: |
            PlantUML_Editor_Proto/E2Eテスト/test-results/
            PlantUML_Editor_Proto/E2Eテスト/screenshots/
          retention-days: 30

  # Phase2 複雑フローテスト
  complex-flows-tests:
    needs: [prepare-environment, basic-tests]
    if: needs.prepare-environment.outputs.app-ready == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'complex-flows' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js in container
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
      - name: Install test dependencies
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npx playwright install ${{ matrix.browser }}
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm ci
          npm start &
          sleep 10
          curl -f http://localhost:8086 || (echo "App startup failed" && exit 1)
        
      - name: Run complex flows tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト/docs/phase2
        run: node test-complex-flows.js ${{ matrix.browser }}
        
      - name: Upload complex flows test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: complex-flows-test-results-${{ matrix.browser }}
          path: |
            PlantUML_Editor_Proto/E2Eテスト/test-results/
            PlantUML_Editor_Proto/E2Eテスト/screenshots/
          retention-days: 30

  # Phase2 パフォーマンステスト
  performance-tests:
    needs: [prepare-environment, basic-tests]
    if: needs.prepare-environment.outputs.app-ready == 'true' && (github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == 'performance' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js in container
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
      - name: Install test dependencies
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npx playwright install ${{ matrix.browser }}
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm ci
          npm start &
          sleep 10
          curl -f http://localhost:8086 || (echo "App startup failed" && exit 1)
        
      - name: Run performance tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト/docs/phase2
        run: node test-performance-metrics.js ${{ matrix.browser }}
        
      - name: Upload performance test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results-${{ matrix.browser }}
          path: |
            PlantUML_Editor_Proto/E2Eテスト/test-results/
            PlantUML_Editor_Proto/E2Eテスト/screenshots/
          retention-days: 30

  # Microsoft Edge専用テスト
  edge-tests:
    needs: [prepare-environment, basic-tests]
    if: needs.prepare-environment.outputs.app-ready == 'true' && (github.event.inputs.browser == 'msedge' || github.event.inputs.browser == 'all-browsers' || github.event_name != 'workflow_dispatch')
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.48.0-jammy
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js in container
        run: |
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          
      - name: Install Microsoft Edge
        run: |
          curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
          install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-stable.list
          apt-get update && apt-get install -y microsoft-edge-stable
          
      - name: Install test dependencies
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npm ci
        
      - name: Install Playwright browsers
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: npx playwright install msedge chromium firefox webkit
        
      - name: Start application server
        working-directory: jp2plantuml
        run: |
          npm ci
          npm start &
          sleep 10
          curl -f http://localhost:8086 || (echo "App startup failed" && exit 1)
        
      - name: Run Edge basic tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト
        run: node test-edge-docker.js
        
      - name: Run Edge Phase2 tests
        working-directory: PlantUML_Editor_Proto/E2Eテスト/docs/phase2
        run: |
          node test-sync-functionality.js msedge
          node test-complex-flows.js msedge
          node test-performance-metrics.js msedge
        
      - name: Upload Edge test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: edge-test-results
          path: |
            PlantUML_Editor_Proto/E2Eテスト/test-results/
            PlantUML_Editor_Proto/E2Eテスト/screenshots/
          retention-days: 30

  # テスト結果統合とレポート生成
  generate-test-report:
    needs: [basic-tests, sync-functionality-tests, complex-flows-tests, performance-tests, edge-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results-all/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install dependencies for report generation
        run: |
          npm init -y
          npm install --save-dev fs-extra glob
          
      - name: Generate consolidated test report
        run: |
          cat > generate-report.js << 'EOF'
          const fs = require('fs-extra');
          const glob = require('glob');
          const path = require('path');
          
          async function generateReport() {
            const resultsDir = 'test-results-all';
            const reportFile = 'consolidated-test-report.md';
            
            let report = `# PlantUML エディタ E2E テスト結果レポート - Phase 2
          
          **実行日時**: ${new Date().toISOString()}
          **コミット**: ${process.env.GITHUB_SHA || 'N/A'}
          **ブランチ**: ${process.env.GITHUB_REF_NAME || 'N/A'}
          
          ## 📊 テスト実行サマリー
          
          `;
          
            // 各種テスト結果を集計
            const testCategories = [
              { name: '基本テスト', pattern: 'basic-test-results-*' },
              { name: '同期機能テスト', pattern: 'sync-test-results-*' },
              { name: '複雑フローテスト', pattern: 'complex-flows-test-results-*' },
              { name: 'パフォーマンステスト', pattern: 'performance-test-results-*' },
              { name: 'Edge専用テスト', pattern: 'edge-test-results' }
            ];
            
            for (const category of testCategories) {
              const dirs = glob.sync(path.join(resultsDir, category.pattern));
              
              report += `### ${category.name}\n\n`;
              
              if (dirs.length === 0) {
                report += `⚠️ テスト結果が見つかりませんでした\n\n`;
                continue;
              }
              
              report += `| ブラウザ | 状態 | 詳細 |\n`;
              report += `|----------|------|------|\n`;
              
              for (const dir of dirs) {
                const browserName = path.basename(dir).replace(category.pattern.replace('*', '').replace('test-results-', ''), '') || 'Edge';
                
                // テスト結果ファイルを探す
                const jsonFiles = glob.sync(path.join(dir, '**/*.json'));
                let status = '✅ 成功';
                let details = 'テスト完了';
                
                if (jsonFiles.length === 0) {
                  status = '⚠️ 不明';
                  details = '結果ファイルなし';
                }
                
                report += `| ${browserName} | ${status} | ${details} |\n`;
              }
              
              report += `\n`;
            }
            
            report += `## 📁 アーティファクト
          
          - テスト結果ファイル
          - スクリーンショット
          - パフォーマンスメトリクス（JSON）
          - HAR ファイル（ネットワーク記録）
          - ビデオ録画（失敗時）
          
          ## 🔧 改善提案
          
          Phase 2 のテスト実装により、以下の領域でのテスト品質が向上しました：
          
          - ✅ PlantUMLコードとUIの双方向同期機能
          - ✅ 複雑なフロー（条件分岐、ループ、並行処理）
          - ✅ パフォーマンス指標の継続監視
          - ✅ CI/CD パイプラインでの自動実行
          
          ### 次のステップ
          
          1. 視覚的リグレッションテストの追加
          2. APIレベルのテスト統合  
          3. セキュリティテストの実装
          4. アクセシビリティテストの強化
          
          ---
          *このレポートは GitHub Actions により自動生成されました*
          `;
            
            await fs.writeFile(reportFile, report);
            console.log(`✅ テストレポートを生成しました: ${reportFile}`);
          }
          
          generateReport().catch(console.error);
          EOF
          
          node generate-report.js
          
      - name: Upload consolidated test report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: |
            consolidated-test-report.md
            test-results-all/
          retention-days: 90

  # Slack通知（成功・失敗の通知）
  notify-results:
    needs: [generate-test-report]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    runs-on: ubuntu-latest
    
    steps:
      - name: Prepare notification
        id: prepare-notification
        run: |
          if [[ "${{ needs.basic-tests.result }}" == "success" && "${{ needs.sync-functionality-tests.result }}" == "success" && "${{ needs.complex-flows-tests.result }}" == "success" && "${{ needs.performance-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
            echo "message=✅ すべてのE2Eテスト（Phase 2）が成功しました" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "message=❌ E2Eテスト（Phase 2）で失敗が発生しました" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.prepare-notification.outputs.message }}",
              "color": "${{ steps.prepare-notification.outputs.color }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                },
                {
                  "title": "Results",
                  "value": "基本: ${{ needs.basic-tests.result }}\n同期: ${{ needs.sync-functionality-tests.result }}\n複雑フロー: ${{ needs.complex-flows-tests.result }}\nパフォーマンス: ${{ needs.performance-tests.result }}",
                  "short": false
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
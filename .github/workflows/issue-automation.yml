# GitHub Issues自動化ワークフロー
# Issueの自動分析、ラベル付け、担当者アサイン、進捗管理

name: Issue Automation

on:
  issues:
    types: [opened, edited, closed, reopened, labeled, unlabeled, assigned, unassigned]
  issue_comment:
    types: [created, edited, deleted]
  project_card:
    types: [created, moved, converted, deleted]

env:
  JAPANESE_LOCALE: ja-JP
  AUTO_ASSIGN_ENABLED: true
  STALE_DAYS: 30

jobs:
  # Issue自動分析と分類
  issue-analysis:
    name: Issue Analysis & Classification
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'edited')
    permissions:
      issues: write
      contents: read
    outputs:
      issue-type: ${{ steps.classify.outputs.type }}
      priority: ${{ steps.classify.outputs.priority }}
      complexity: ${{ steps.classify.outputs.complexity }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Issue Classification
        id: classify
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const title = issue.title.toLowerCase();
            const body = (issue.body || '').toLowerCase();
            
            let issueType = 'question';
            let priority = 'normal';
            let complexity = 'medium';
            let labels = [];
            
            // 日本語キーワード分析
            const keywords = {
              bug: ['バグ', 'エラー', '問題', '不具合', 'bug', 'error', 'issue'],
              feature: ['機能', '新機能', '追加', '実装', 'feature', 'enhancement', 'add'],
              improvement: ['改善', '最適化', '向上', 'improvement', 'optimize', 'enhance'],
              documentation: ['ドキュメント', '文書', 'document', 'docs', 'readme'],
              question: ['質問', '教えて', 'question', 'help', 'how to'],
              security: ['セキュリティ', '脆弱性', 'security', 'vulnerability'],
              performance: ['パフォーマンス', '速度', '遅い', 'performance', 'slow'],
              ui: ['ui', 'ux', 'デザイン', 'レイアウト', 'スタイル'],
              api: ['api', 'サーバー', 'バックエンド', 'エンドポイント'],
              frontend: ['フロントエンド', 'javascript', 'html', 'css', 'react'],
              database: ['データベース', 'db', 'sql', 'データ'],
              deployment: ['デプロイ', 'deploy', '本番', 'production'],
              test: ['テスト', 'test', 'テスティング', 'testing']
            };
            
            // 優先度キーワード
            const priorityKeywords = {
              high: ['緊急', '急ぎ', 'urgent', 'critical', '重要', 'important'],
              low: ['低優先度', 'nice to have', '後で', 'later', '改善案']
            };
            
            // 複雑度キーワード
            const complexityKeywords = {
              high: ['大規模', '複雑', '全面的', '根本的', '設計変更'],
              low: ['簡単', 'easy', 'simple', '軽微', 'typo', 'ドキュメント']
            };
            
            const text = `${title} ${body}`;
            
            // Issue種別判定
            for (const [type, words] of Object.entries(keywords)) {
              if (words.some(word => text.includes(word))) {
                if (type === 'bug') {
                  issueType = 'bug';
                  labels.push('bug');
                  break;
                } else if (type === 'feature') {
                  issueType = 'feature';
                  labels.push('enhancement');
                  break;
                } else if (['improvement', 'performance', 'security'].includes(type)) {
                  issueType = 'improvement';
                  labels.push(type);
                  break;
                } else if (type === 'documentation') {
                  issueType = 'documentation';
                  labels.push('documentation');
                  break;
                }
                labels.push(type);
              }
            }
            
            // 優先度判定
            for (const [level, words] of Object.entries(priorityKeywords)) {
              if (words.some(word => text.includes(word))) {
                priority = level;
                labels.push(`priority-${level}`);
                break;
              }
            }
            
            // 複雑度判定
            for (const [level, words] of Object.entries(complexityKeywords)) {
              if (words.some(word => text.includes(word))) {
                complexity = level;
                labels.push(`complexity-${level}`);
                break;
              }
            }
            
            // 日本語Issueの検出
            if (/[ひらがなカタカナ漢字]/.test(text)) {
              labels.push('japanese');
            }
            
            // PlantUML関連の検出
            if (text.includes('plantuml') || text.includes('プラントuml') || text.includes('図')) {
              labels.push('plantuml-related');
            }
            
            // 結果を出力
            core.setOutput('type', issueType);
            core.setOutput('priority', priority);
            core.setOutput('complexity', complexity);
            core.setOutput('labels', JSON.stringify(labels));
            
            return { issueType, priority, complexity, labels };

      - name: Apply Labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = JSON.parse('${{ steps.classify.outputs.labels }}');
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                labels: labels
              });
            }

      - name: Add Analysis Comment
        uses: actions/github-script@v7
        with:
          script: |
            const issueType = '${{ steps.classify.outputs.type }}';
            const priority = '${{ steps.classify.outputs.priority }}';
            const complexity = '${{ steps.classify.outputs.complexity }}';
            
            const typeEmojis = {
              'bug': '🐛',
              'feature': '✨', 
              'improvement': '⚡',
              'documentation': '📚',
              'question': '❓'
            };
            
            const priorityEmojis = {
              'high': '🚨',
              'normal': '📋',
              'low': '📝'
            };
            
            const analysisComment = `
            ## ${typeEmojis[issueType] || '📋'} 自動Issue分析結果
            
            **分析日時**: ${new Date().toLocaleString('ja-JP')}
            
            ### 🔍 分類結果
            - **種別**: ${issueType} ${typeEmojis[issueType] || ''}
            - **優先度**: ${priority} ${priorityEmojis[priority] || ''}
            - **複雑度**: ${complexity}
            
            ### 📋 次のアクション
            ${issueType === 'bug' ? 
              '1. 再現手順の確認\n2. 環境情報の収集\n3. 修正方針の決定' :
              issueType === 'feature' ?
              '1. 要件の詳細確認\n2. 技術的実現性の検討\n3. 実装計画の策定' :
              '1. 内容の詳細確認\n2. 対応方針の決定\n3. 担当者のアサイン'
            }
            
            ### ⏰ 推定対応時間
            ${complexity === 'high' ? '2-5日程度' :
              complexity === 'medium' ? '半日-2日程度' :
              '数時間-半日程度'
            }
            
            ---
            *自動分析by ClaudeCodeActions*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: analysisComment
            });

  # 自動担当者アサイン
  auto-assign:
    name: Auto Assignment
    runs-on: ubuntu-latest
    needs: issue-analysis
    if: env.AUTO_ASSIGN_ENABLED == 'true' && github.event.action == 'opened'
    permissions:
      issues: write
    steps:
      - name: Auto Assign Based on Issue Type
        uses: actions/github-script@v7
        with:
          script: |
            const issueType = '${{ needs.issue-analysis.outputs.issue-type }}';
            const priority = '${{ needs.issue-analysis.outputs.priority }}';
            
            // 担当者マッピング（実際のGitHubユーザー名に置き換えてください）
            const assignees = {
              'bug': ['maintainer1', 'developer1'],
              'feature': ['developer1', 'developer2'],
              'security': ['security-team'],
              'performance': ['performance-team'],
              'documentation': ['doc-team'],
              'question': ['support-team']
            };
            
            const defaultAssignees = ['maintainer1'];
            let selectedAssignees = assignees[issueType] || defaultAssignees;
            
            // 高優先度の場合は追加担当者をアサイン
            if (priority === 'high') {
              selectedAssignees = [...selectedAssignees, 'tech-lead'];
            }
            
            // 重複を除去
            selectedAssignees = [...new Set(selectedAssignees)];
            
            try {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                assignees: selectedAssignees
              });
              
              // アサイン通知コメント
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `👥 **自動担当者アサイン**\n\n` +
                     `${selectedAssignees.map(a => `@${a}`).join(', ')} にアサインされました。\n\n` +
                     `Issue種別: **${issueType}** | 優先度: **${priority}**\n\n` +
                     `よろしくお願いします！`
              });
            } catch (error) {
              console.log('Auto-assignment failed:', error.message);
            }

  # 進捗追跡と通知
  progress-tracking:
    name: Progress Tracking
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'labeled' || github.event.action == 'unlabeled')
    permissions:
      issues: write
    steps:
      - name: Track Progress Updates
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const label = context.payload.label;
            
            if (!label) return;
            
            const progressLabels = {
              'status-todo': '📋 TODO',
              'status-in-progress': '🔄 進行中', 
              'status-review': '👀 レビュー中',
              'status-testing': '🧪 テスト中',
              'status-done': '✅ 完了'
            };
            
            if (progressLabels[label.name]) {
              const action = context.payload.action === 'labeled' ? '追加' : '削除';
              const status = progressLabels[label.name];
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `## 📊 ステータス更新\n\n` +
                     `**${status}** ラベルが${action}されました。\n\n` +
                     `更新日時: ${new Date().toLocaleString('ja-JP')}\n\n` +
                     `現在のステータス: **${status}**`
              });
            }

  # 古いIssueの自動管理
  stale-issue-management:
    name: Stale Issue Management  
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      issues: write
    steps:
      - name: Find Stale Issues
        uses: actions/github-script@v7
        with:
          script: |
            const staleDays = parseInt('${{ env.STALE_DAYS }}');
            const staleDate = new Date();
            staleDate.setDate(staleDate.getDate() - staleDays);
            
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc'
            });
            
            for (const issue of issues) {
              const updatedAt = new Date(issue.updated_at);
              
              if (updatedAt < staleDate && !issue.labels.some(l => l.name === 'stale')) {
                // Staleラベルを追加
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['stale']
                });
                
                // Stale通知コメント
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## ⏰ 長期間未更新のお知らせ\n\n` +
                       `このIssueは${staleDays}日間更新されていません。\n\n` +
                       `**対応が必要な場合は:**\n` +
                       `- 進捗状況をコメントで更新してください\n` +
                       `- 不要な場合はクローズしてください\n` +
                       `- 継続が必要な場合はstaleラベルを削除してください\n\n` +
                       `7日後に自動的にクローズされる可能性があります。`
                });
              }
            }

  # Issue統計レポート
  issue-statistics:
    name: Issue Statistics
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    permissions:
      issues: read
      contents: write
    steps:
      - name: Generate Statistics Report
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            
            const stats = {
              total: issues.length,
              open: issues.filter(i => i.state === 'open').length,
              closed: issues.filter(i => i.state === 'closed').length,
              bugs: issues.filter(i => i.labels.some(l => l.name === 'bug')).length,
              features: issues.filter(i => i.labels.some(l => l.name === 'enhancement')).length,
              japanese: issues.filter(i => i.labels.some(l => l.name === 'japanese')).length
            };
            
            const report = `
            # 📊 Issue統計レポート
            
            **生成日時**: ${new Date().toLocaleString('ja-JP')}
            
            ## 全体統計
            - **総Issue数**: ${stats.total}
            - **オープン**: ${stats.open}
            - **クローズ済み**: ${stats.closed}
            - **解決率**: ${((stats.closed / stats.total) * 100).toFixed(1)}%
            
            ## カテゴリ別
            - **🐛 バグ**: ${stats.bugs}
            - **✨ 機能要求**: ${stats.features}  
            - **🇯🇵 日本語Issue**: ${stats.japanese}
            
            ---
            *Generated by Issue Automation*
            `;
            
            console.log(report);

# 定期実行設定
on:
  schedule:
    # 毎日AM9:00（JST）に実行
    - cron: '0 0 * * *'
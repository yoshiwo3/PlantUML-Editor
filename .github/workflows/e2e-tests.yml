name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日深夜2時（JST 11時）に実行
    - cron: '0 17 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20.18.0'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # Jest単体テスト
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            jp2plantuml/package-lock.json
            
      - name: Install dependencies
        run: |
          cd jp2plantuml
          npm ci
          
      - name: Run unit tests
        run: |
          cd jp2plantuml
          npm test -- --coverage --maxWorkers=2
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./jp2plantuml/coverage/lcov.info
          flags: unittests
          name: codecov-unit
        if: always()

  # Playwright E2Eテスト（マトリックス戦略）
  e2e-tests:
    name: E2E Tests - ${{ matrix.browser }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, msedge]
        include:
          - browser: chromium
            args: '--no-sandbox --disable-dev-shm-usage --disable-gpu'
          - browser: firefox
            args: ''
          - browser: msedge
            args: '--no-sandbox --disable-dev-shm-usage'
    
    services:
      plantuml:
        image: node:20.18.0-alpine
        options: --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:8087/health || exit 1"
        ports:
          - 8087:8087
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Playwright
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          npm ci
          npx playwright install ${{ matrix.browser }} --with-deps
          
      - name: Start PlantUML Server
        run: |
          cd PlantUML_Editor_Proto
          npx http-server -p 8087 -c-1 &
          sleep 5
          curl -f http://localhost:8087 || exit 1
          
      - name: Run E2E tests - ${{ matrix.browser }}
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          export BROWSER=${{ matrix.browser }}
          export BROWSER_ARGS="${{ matrix.args }}"
          npm run test:${{ matrix.browser }}
        continue-on-error: ${{ matrix.browser == 'webkit' }}
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: |
            PlantUML_Editor_Proto/E2Eテスト/docs/phase2/test-results/
            PlantUML_Editor_Proto/E2Eテスト/docs/phase2/*.png
          retention-days: 30

  # WebKit専用テスト（失敗を許容）
  webkit-test:
    name: WebKit Test (Experimental)
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Playwright with WebKit
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          npm ci
          npx playwright install webkit --with-deps
          
      - name: Start PlantUML Server
        run: |
          cd PlantUML_Editor_Proto
          npx http-server -p 8087 -c-1 &
          sleep 5
          
      - name: Run WebKit test
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          node test-webkit.cjs || echo "WebKit test failed (expected)"
          
      - name: Upload WebKit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: webkit-results
          path: PlantUML_Editor_Proto/E2Eテスト/docs/phase2/webkit-*.png

  # Docker環境での包括テスト
  docker-tests:
    name: Docker E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          docker-compose build --parallel
          
      - name: Run Docker tests
        run: |
          cd PlantUML_Editor_Proto/E2Eテスト/docs/phase2
          docker-compose run --rm -e CI=true playwright npm run test:all
          
      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: |
            PlantUML_Editor_Proto/E2Eテスト/docs/phase2/test-results/
            PlantUML_Editor_Proto/E2Eテスト/docs/phase2/*.png

  # テスト結果の集約とレポート
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, docker-tests]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate test summary
        run: |
          echo "# テスト実行結果サマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ✅ 実行完了テスト" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Docker Tests: ${{ needs.docker-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 詳細" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js Version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Workflow: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- Run Number: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

  # デプロイメント（mainブランチのみ）
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, docker-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://plantuml-editor.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # ここに実際のデプロイコマンドを記述
          # 例: kubectl apply -f k8s/
          # 例: docker push registry/image:latest